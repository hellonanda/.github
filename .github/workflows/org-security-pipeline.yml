name: Org Security Secrets + SBOM + Vuln Check

on:
  workflow_dispatch: {}
  workflow_call:
    inputs:
      image_name:
        description: "Local image tag to build/scan (e.g., myapp)"
        required: false
        type: string
        default: app
      context:
        description: "Docker build context"
        required: false
        type: string
        default: .
      dockerfile:
        description: "Path to Dockerfile"
        required: false
        type: string
        default: Dockerfile
      build_image:
        description: "Build image before SBOM/scan"
        required: false
        type: boolean
        default: true
      severity_cutoff:
        description: "Fail on this severity or higher (low|medium|high|critical)"
        required: false
        type: string
        default: high
      scan_secrets:
        description: "Run hard-coded secret scan (Gitleaks)"
        required: false
        type: boolean
        default: true
    secrets:
      GITLEAKS_LICENSE:
        required: false

permissions:
  contents: read
  security-events: write   # needed only if you enable SARIF upload below
  actions: read            # helps avoid upload-sarif permission edge cases

jobs:
  # secrets:
  #   if: ${{ inputs.scan_secrets }}
  #   name: Hard-coded secret scan (Gitleaks)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout full history
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0   # enables scanning across commit history

  #     - name: Run Gitleaks
  #       uses: gitleaks/gitleaks-action@v2
  #       with:
  #         args: detect --source . --no-git --report-format sarif --report-path gitleaks.sarif

  build_and_sbom:
    name: Build image & generate SBOM (Syft)
    runs-on: ubuntu-latest
    # needs: [secrets]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        if: ${{ inputs.build_image }}
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (local)
        if: ${{ inputs.build_image }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          load: true
          tags: ${{ inputs.image_name }}:${{ github.sha }}

      - name: Generate SBOM (Syft)
        id: sbom
        uses: anchore/sbom-action@v0
        with:
          image: ${{ inputs.image_name }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json
        
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          if-no-files-found: error
  vuln_scan:
    name: Validate SBOM (Grype) & fail on High/Critical
    runs-on: ubuntu-latest
    needs: [build_and_sbom]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Download SBOM artifact
        uses: actions/download-artifact@v4
        with:
          name: sbom
  
      # Scan SBOM and fail on High/Critical
      - name: Scan SBOM with Grype
        id: grype
        uses: anchore/scan-action@v6
        with:
          sbom: sbom.spdx.json
          output-format: json
          severity-cutoff: high   # only High/Critical will fail build
          fail-build: true
  
      # Upload JSON artifact for debugging
      - name: Upload Grype JSON (for debugging)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: grype-json
          path: ${{ steps.grype.outputs.json }}
          if-no-files-found: ignore
  
      # Scan SBOM for SARIF (for GitHub Code Scanning)
      - name: Scan SBOM with Grype (SARIF)
        id: grype_sarif
        uses: anchore/scan-action@v6
        with:
          sbom: sbom.spdx.json
          output-format: sarif
          fail-build: false
  
      # Upload SARIF to GitHub Code Scanning
      - name: Upload SARIF to Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.grype_sarif.outputs.sarif }}
  
      # Simple vulnerability summary in Actions UI
      - name: Security Summary (Markdown)
        if: always()
        shell: bash
        run: |
          JSON="${{ steps.grype.outputs.json }}"
          if [ -f "$JSON" ]; then
            CRIT=$(jq '[.matches[] | select(.vulnerability.severity=="Critical")] | length' "$JSON")
            HIGH=$(jq '[.matches[] | select(.vulnerability.severity=="High")] | length' "$JSON")
  
            {
              echo "## Security Summary"
              echo
              echo "| Severity | Count |"
              echo "|---|---|"
              echo "| Critical | $CRIT |"
              echo "| High | $HIGH |"
              echo
              echo "### Top 15 High/Critical Vulnerabilities"
              echo "| Severity | ID | Package | Installed | FixedIn |"
              echo "|---|---|---|---|---|"
            } >> "$GITHUB_STEP_SUMMARY"
  
            jq -r '
              .matches[]
              | select(.vulnerability.severity=="Critical" or .vulnerability.severity=="High")
              | [ .vulnerability.severity
                , .vulnerability.id
                , .artifact.name
                , (.artifact.version // "n/a")
                , ((.vulnerability.fix.versions[0]) // "none")
                ]
              | @tsv
            ' "$JSON" | head -n 15 | awk -F'\t' '{printf("| %s | %s | %s | %s | %s |\n",$1,$2,$3,$4,$5)}' >> "$GITHUB_STEP_SUMMARY"
          else
            echo "No Grype JSON output found." >> "$GITHUB_STEP_SUMMARY"
          fi
   
